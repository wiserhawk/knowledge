=============================================================
						PYTHON 3
=============================================================
	
	# Python Tutorial: https://www.youtube.com/watch?v=YYXdXT2l-Gg&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU
	
	===============================================
	- Python-3 Installation on Windows
	===============================================
		
		-- go to https://www.python.org/downloads
		
		-- Download python installer with python 3
		
		-- While installing python check the checkbox 'Add Python 3.x to PATH'
		
		-- Complete installation of python on Windows
	
	=============================================
	- Start Working on Python Command Line
	=============================================
		
		-- To open interactive prompt for python
			$ python 
		
		-- Print Hello World
			$ print('Hello World !!')
		
		-- Set variable
			$ x = 10
			$ print(x)
		
		-- To exit interactive prompt
			$ exit()
	
	==========================================
	- Work on default python editor (IDLE)
	==========================================
		
		-- you can create new python file to execute python program with *.py name
		
		-- Run python file from given path
			$ python c:/python-source/firstprogram.py
		
		-- Comment on python file
			# Add comment here.
	
	==========================================
	- Some popular editors
	==========================================
		
		-- Sublime Text
		-- ATOM
		-- PyCharm
		-- Eclipse with PyDev Plugin
	
	==========================================
	- Strings : Working with Textual Data
	==========================================
		
		-- Print string
			$ message = 'Hello World'
			$ print(message)
		
		-- Print string with double qoutes
			$ message = "Maddy's World !!"
			$ print(message)
		
		-- Print string with single & double qoutes together in some cases
			$ message = 'He sail "Hello!!!"'
			$ print(message)
		
		-- Print string multiline string using triple quotes
			$ message = """Cool these three quotes
							Works well with multiline case"""
			$ print(message)
		
		-- Print length of string
			$ message = 'Hello World'
			$ print(len(message))
		
		-- Access string element using index
			$ print(message[0])
		
		-- Getting substring using indices; First index is inclusive but Second index is exlusive
			$ print(message[0:5]
		
		-- Getting substring from start index to extreme end
			$ print(message[6:])
		
		-- Getting substring from end index to extreme right
			$ print(message[:5])
		
		-- lower case
			$ print(message.lower())
		
		-- upper case
			$ print(message.upper())
		
		-- Count numbers of substring occurrence in string
			$ print(message.count('Hello'))
		
		-- Find index of first occurrence; Return -1 if not found
			$ print(message.find('o'))
		
		-- Replacement
			$ message = 'Hello World'
			$ message = message.replace('World', 'Ãšniverse')
			$ print(message)
		
		-- Multiple string concatination
			$ greeting = 'Hello'
			$ name = 'Manoj'
			$ message = greeting + ' ' + name
			$ print(message)
		
		-- Formated string
			$ greeting = 'Hello'
			$ name = 'Manoj'
			$ message = '{} {}. Welcome !!!'.format(greeting, name)
			$ print(message)
		
		-- fstring in above python 3.6
			$ $ greeting = 'Hello'
			$ name = 'Manoj'
			$ message = f'{greeting} {name}. Welcome !!!'
			$ print(message)
		
		-- To help regarding string
			$ print(dir(message))
		
		-- For complete help for string class
			$ print(help(str))
		
		-- For specific function help
			$ print(help(str.find))
	
	=================================================
	- Integer & Float : Working with Numeric Data
	=================================================	
		
		-- Check type of variable
			$ num = 3
			$ print(type(num))
			$ num = 3.14
			$ print(type(num))
		
		-- Arithmetic Operations
			Addition		: 3 + 2 	= 5 
			Subtraction 	: 3 - 2		= 1
			Multiplication 	: 3 * 2		= 6
			Division 		: 3 / 2		= 1.5
			Floor Division 	: 3 // 2	= 1
			Exponent 		: 3 ** 2	= 9
			Modulus 		: 3 % 2		= 1
		
		-- Absolute value
			$ print(abs(-3))
		
		-- Round value
			$ print(round(3.75))
			$ print(round(3.75, 1))
		
		-- Comparisions Operators
			Equal			:	3 == 2	= False	
			Not equal		:	3 != 2	= True
			Greater Than	:	3 > 2 	= True
			Less Than		: 	3 < 2	= False
			Greater or Equal: 	3 >= 2	= True
			Less or Equal	: 	3 <= 2	= False
		
		-- Casting
			$ num_1 = '100'
			$ num_2 = '200'
			$ num-1 = int(num_1)
			$ num_2 = int(num_2)
			$ print(num_1 + num_2)
	
	=========================================
	- Collections : Lists, Tuples & Sets
	=========================================
		
		-- List: Provide sequencial data and lot more functionality with mutability
			$ courses = ['History', 'Math', 'Physics', 'CompSci']
			$ print(courses)
			$ print(len(courses))
			$ print(courses[0])
			$ print(courses[-1]) # Get item from last index; output = CompSci
			$ print(courses[0:2])
			$ print(courses[:2])
			$ print(courses[2:])
			## Add item to List
			$ courses.append('Art')
			$ print(courses)
			## Add at particular location
			$ courses.insert(0, 'Art')
			$ print(courses)
			## Insert List to Another List
			$ courses = ['History', 'Math', 'Physics', 'CompSci']
			$ courses_2 = ['Art', 'Education']
			$ courses.insert(0, courses_2) 
			$ print(courses)
			## Extend List 
			$ courses.extend(courses_2)
			$ print(courses)
			## Remove item 
			$ courses.remove('Math')
			$ print(courses)
			## Remove from last; Work like Stack
			$ popped = courses.pop()
			$ print(popped)
			$ print(courses)
			## Reverse list
			$ courses.reverse()
			$ print(courses)
			## Sort List
			$ courses.sort()
			$ print(courses)
			## Sort on descending order
			$ nums = [1,4,2,5,6]
			$ nums.sort(reverse=True)
			$ courses.sort(reverse=True)
			$ print(nums)
			$ print(courses)
			## Sort using sorted function
			$ sorted_courses = sorted(courses)
			$ print(sorted_courses)
			## Some Aggrigation functions
			$ nums = [1,4,2,5,6]
			$ print(min(nums))
			$ print(max(nums))
			$ print(sum(nums))
			## To find index for any item
			$ print(courses.index('CompSci'))
			$ print(courses.index('Algo')) # If not in list: ERROR = ValueError: Alog is not in list
			## To check if item in list
			$ print('Algo' in courses) # False
			$ print('Math' in courses) # True
			## Print items using loop
			$ for item in courses:
				print(item)
			## Print index and item using enumerate & loop
			$ for index, item in enumerate(courses):
				print(index, item)
			## To set start value for index in enumerate
			$ for index, item in enumerate(courses, start=1):
				print(index, item) # Now index will get started from 1 instead of 0.
			## Join function : For example to create comma separated string
			$ course_str = ', '.join(courses)
			$ print(course_str)
			## Split comma separated string and create list
			$ course_str = ', '.join(courses)
			$ list = course_str.split(', ')
			$ print(list)
		
		-- Tuple: Provide sequencial data and lot more functionality with immutability 
			$ tuple = ('History', 'Math', 'Physics', 'CompSci')
			$ tuple_1[0] = 'Art' # Throw Error because it immutable
		
		-- Set : Unorder values with no duplicates
			$ cs_courses = {'History', 'Math', 'Physics', 'CompSci'}
			$ print(cs_courses)
			## To check if item exists
			$ print('Math' in set) # True
			## Get intersection for two sets
			$ cs_courses = {'History', 'Math', 'Physics', 'CompSci'}
			$ art_courses = {'History', 'Math', 'Art', 'Design'}
			$ print(cs_courses.intersection(art_courses))
			## Get difference for two sets
			$ print(cs_courses.difference(art_courses))
			## Get union of two sets
			 print(cs_courses.union(art_courses))
		
		-- Declaring empty List, Tuple & Set
			## Empty List
			$ empty_list = []
			$ empty_list = list()
			## Empty Tuple
			$ empty_tuple = ()
			$ empty_tuple = tuple()
			## Empty Set
			$ empty_set = {} # This is NOT RIGHT; its a dictionary 
			$ empty_set = set()
			
	===================================================
	- Dictionaries : Working with Key & Value Pairs
	===================================================
	
		-- Create dictionary using key & value
			$ student = {'name':'John', 'age':'25', 'courses':['Math', 'CompSci']}
		-- Get value by key
			$ print(student['name']) # If key doesn't exists; will throw 'KeyError'
					or
			$ print(student.get('name')) # If key doesn't exists; will give 'None'
			$ print(student.get('hello', 'Not Found')) # If key doesn't exists; will give 'Not Found'
		-- Set/Update new key & value
			$ student['phone'] = '555-55555-55' # Can update or add single pair
			$ student.update({'name':'Manoj', 'age':'36', 'phone':'999-99999-99', 'class':'PHD'}) # Can add, update multiple pair in one go.
		-- Delete from dictionary
			$ del student['class'] 
					or
			$ age = student.pop('age')
			$ print(age)
			$ print(student)
		-- Get numbers of elements in dictionary
			$ print(len(student))
		-- Get all keys 
			$ print(student.keys())
		-- Get all values 
			$ print(student.values())
		-- Get all keys & values 
			$ print(student.items())
		-- Loop over dictionary
			$ for key in student:
				print(student[key])
			
			$ for key, value in student.items():
				print(key, value)
	
	===========================================================
	- Conditionals & Booleans : If, Else and Elif Statements
	===========================================================
	
		-- Comparisions Operators
			# Equal 			: 	==
			# Not Equal			:	!=
			# Greater Than		:	>
			# Less Than			:	<
			# Greater Than Equal:	>=
			# Less Than Equal	:	<=
			# Object Identity	:	is
		
		-- 	Some conditional examples
			-------------------------------------------
			if True:
				print('Condition is True')
			
			-------------------------------------------	
			language = 'python'
			if language == 'Python':
				print('Language is python')
			else:
				print('Language is ' + language)
			
			--------------------------------------------
			language = 'java'
			if language == 'Python':
				print('Language is python')
			else:
				print('Language is ' + language)
			
			--------------------------------------------
			language = 'java'
			if language == 'Python':
				print('Language is python')
			elif language == 'java':
				print('Language is java')
			else:
				print('No match')
			
			--------------------------------------------
			user = 'Admin'
			logged_in = True

			if user == 'Admin' and logged_in:
				print('Admin Page')
			else:
				print('Bad Creds')
			
			--------------------------------------------
			user = 'Admin'
			logged_in = False

			if user == 'Admin' or logged_in:
				print('Admin Page')
			else:
				print('Bad Creds')
			
			--------------------------------------------
			logged_in = False

			if not logged_in:
				print('Please Log in')
			else:
				print('Welcome!!')
			
			--------------------------------------------
			a = [1,2,3]
			b = [1,2,3]
			
			print(a == b) 			# True : check equality of objects
			print(a is b)			# False : check object identity of objects
			
			print(id(a))    		# Check id of a 
			print(id(b))    		# Check id of b
			
			a = b					# Assign same object to a as b
			print(a is b)   		# True 
			print(id(a) == id(b)) 	# True
			
			print(id(a))    		# Check id of a 
			print(id(b))    		# Check id of b
		
			--------------------------------------------
			# Below Given values in Python evaluated as False
			# False
			# None
			# Zero of any numeric type
			# Any empty sequence; For example, '', (), []
			# Any empty mapping; For example, {}	
			
			condition = {}

			if condition:
				print('Evaluated to True')
			else:
				print('Evaluated to False')
			----------------------------------------------
	
	====================================================
	- Loops & Iterations : For/While Loops
	====================================================
		
		-- For loop variants
		---------------------------------------
			nums = [1,2,3,4,5,6]

			for num in nums:
				print(num)
		
		---------------------------------------
			nums = [1,2,3,4,5,6]

			for num in nums:
				if num == 4:
					print('Found 4')
					break
				print(num)
		
		---------------------------------------
			nums = [1,2,3,4,5,6]

			for num in nums:
				if num == 4:
					continue
				print(num)
		
		---------------------------------------
			nums = [1,2,3,4,5,6]

			for num in nums:
				for letter in 'abc':
					print(num, letter)
		
		---------------------------------------
			for i in range(10):		# 0 to 9
				print(i)
		
		---------------------------------------
			for i in range(1,11): 	# 1 to 10
				print(i)
		
		---------------------------------------
			for i in range(1,11,2): # Incremnet by +2
				print(i)
		
		--------------------------------------
		
		-- While loop variants
		---------------------------------------
			x = 0
			while x < 10:
				print(x)
				x += 1
		
		---------------------------------------
			x = 0
			while x < 10:
				print(x)
				if (x == 5):
					break;
				x += 1
	
	===============================================
	- Functions 
	===============================================
		
		# Non-parameterized functions
		----------------------------------------
			def print_hello():
				print('Hello Print Function')

			print_hello()
		
		----------------------------------------
			def hello():
				return 'Hello Function'

			print(hello()) 
		
		----------------------------------------
			def hello():
				return 'Hello Function'

			print(hello().upper())
		
		----------------------------------------
		
		# Parameterized functions
		----------------------------------------
			def hello(greeting):
				return '{} Function'.format(greeting)

			print(hello('Hi'))
		
		----------------------------------------
			# Default value for parameter
			
			def hello(greeting, name='You'):
				return '{} {}'.format(greeting, name)

			print(hello('Hi'))
			print(hello('Hi', 'Manoj'))
		
		----------------------------------------
			# *args : Take arbitrary numbers of arguments
			# **kwargs : Take arbitrary numbers of keywords arguments
			
			def student_info(*args, **kwargs):
				print(args)
				print (kwargs)

			student_info('Math', 'CompSci', name='Manoj', age='36')
		
		----------------------------------------
			# *args : Take arbitrary numbers of arguments
			# **kwargs : Take arbitrary numbers of keywords arguments

			def student_info(*args, **kwargs):
				print(args)
				print (kwargs)

			courses = ['Math', 'CompSci']
			info = {'name':'Manoj', 'age':'36'}

			student_info(*courses, **info) 		# Unpack arguments so that function can under stand it better
		
		---------------------------------------
			# Utility Function to check leap year and days in given month and year

			month_days = (0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)

			def is_leap(year):
				"""Returns True for leap years, False for non-leap years"""

				return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)

			def days_in_month(year, month):
				"""Returns number of days in that month in that year"""

				if not 1 <= month <= 12:
					return 'Invalid Month'

				if month == 2 and is_leap(year):
					return 29

				return month_days[month]


			print(days_in_month(2019, 2))   # Not a leap year
			print(days_in_month(2020, 2))    # leap year
		
		----------------------------------------
	
	========================================================
	- Import Modules & Exploring The Standard Libraries
	========================================================
		
		-- Import complete module to current file
			$ import module_name as alias
						or
			$ from module_name import *
		
		-- Import particular function from module to current file
			$ from module_name import func_name_1, func_name_2
						or
			$ from module_name import func_name_1 as func_1, func_name_2 as func_2
		
		-- Python check multiple locations to import any module. Those location are mention is sys.path
			$ import sys
			$ print(sys.path)
			
		-- You can append any path manually in sys.path; but is not recommended
			$ import sys
			$ sys.path.append('c:/xyz')
		
		-- You can append any path manually in sys.path by added path in Environment Variable.
			-- Create a environment variable call PYTHONPATH=c:/xyz and restart python terminal
			-- you can see your path appened in sys.path
			
		-- To find location of any module used.
			$ import os
			$ print(os.__file__)
			
	====================================
	- Install Pip Package Manager 
	====================================
		
		-- Once youâ€™ve confirmed that Python is correctly installed, you can proceed with installing Pip.

			--- Download get-pip.py(https://bootstrap.pypa.io/get-pip.py) to a folder on your computer.
			--- Open a command prompt and navigate to the folder containing get-pip.py.
			---	Run the following command:
				$ python get-pip.py
			
			--- Pip is now installed!
			--- You can verify that Pip was installed correctly by opening a command prompt and entering the following command:
				$ pip -V
			
			---	You should see output similar to the following:
				$ pip 18.0 from c:\users\administrator\appdata\local\programs\python\python37\lib\site-packages\pip (python 3.7)
			
			--- Now that Pip is installed and configured, you can begin using it to manage your Python packages. For a brief overview of the available commands and syntax for Pip, open a command prompt and enter:
				$ pip help
	
	==========================================================
	- Pip : An In-depth look in at Packages Manager System 
	==========================================================
		
		-- Search any package 
			$ pip search pympler
			
		-- Install any package
			$ pip install pympler
			
		-- List of all installed packages
			$ pip list
		
		-- Uninstall any package
			$ pip uninstall pympler
			
		-- Check outdated version packages
			$ pip list --outdated
			
		-- Update any package 
			$ pip install -U setuptools
		
		-- Print package in requirement file
			$ pip freeze
			
		-- Create requirement file using pip
			$ pip freeze > requirement.txt
			
		-- Installing packages using requirement file
			$ pip install -r requirement.txt
		
		-- Update all installed packages to latest version in one go. Even though there is not direct option to do so, but there is workaround for that
			$ pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip install -U
			
	============================================================
	- virtualenv and why you should use virtual environments
	============================================================
		
		-- virtualenv is package to keep multiple environment setups for multiple projects
		
		-- Install virtualenv 
			$ pip install virtualenv
			
		-- Setup virtual environment
			
			--- make empty environments directory
				$ mkdir environments
				
				$ cd environments
				
			--- create virtual environment for any projects
				$ virtualenv first_app_env
			
			--- activate virtual environment
				$ cd first_app_env/Scripts
				$ activate
				
				NOTE: 	you will see active environment at start of you prompt e.g (first_app_env). 
						Now every command like pip will locallly work for first_app_env.
						You can list out packages install for this current environment or
						you can install new packages for this current environment.
				$ pip list
				$ pip install numpy
				$ pip install pytz
				$ pip install psutil
				$ pip list
				
			--- create requirement file from this local virtualenv to create another environment for some other project.
				$ pip freeze --local > requirement.txt
				
				NOTE: --local mean only virtualenv's local depenencies will be moved to requirement file; not those which are coming from globally.
				
			--- Deactivate your current virtualenv
				$ deactivate
				
			--- delete virtualenv using DOC command; Follow corresponding OS commands to remove virtualenv directory.
				$ rmdir /S first_app_env	
				
			--- Creatae virtual environment and use different Python version
				
				NOTE: Just use the --python (or short -p) option when creating your virtualenv instance to specify the Python executable 
				you want to use, e.g.:

				# virtualenv --python=/usr/bin/python2.6 test_env
				
			--- create virtual environment using requirement file
				$ virtualenv test_evn
				$ cd test_env
				$ cd Scripts
				$ activate
				$ cd..
				$ cd..
				$ pip install -r requirement.txt
				
	=========================================
	- Anaconda: Installation & Using Conda
	=========================================
	
		-- Anconda is data science platform which comes lots of stuff out of box. Its provide python distrubution to handle lots of problems for beginer. 
			Anaconda python distrubution contains wide range of preinstalled packages to support wide varieties of featues and issues.
		
		-- Anconda comes with its packages manager call Conda. Conda is useful because it can install non python packages. It can install something
			which no necessarily make sence with pip.
			
		-- Conda commands
			
			--- Conda help
				$ conda --help
				
			--- List out packages
				$ conda list
				
			--- Create virtual environment with some staring packages; You need atleast one package to create virtual environment
				$ condata create --name my_env flask sqlalchemy
			
			--- You can activate virtual environment similar to virtualenv
			
			--- You can deactivate virtual environment similar to virtualenv
			
			--- List of all virtual environments create via Conda
				$ conda env list
				
			--- Remove virtual environment: use option --all if want to remove all packages otherwise mention packages names
				$ conda remove --name my_env --all
				
	===================================================================================
	- How to manage Mutiple Projects, Virtual Environments & Environment Variables
	===================================================================================
	
		-- you can used pip, virtualenv or conda to manage and activate/deactivate virtual environments based of requirements

		-- good example shown here : https://www.youtube.com/watch?v=cY2NXB_Tqq0&t=737s
	
	=======================================================
	- Jupyter Notebook: Introduction , Setup & Walkthrough
	=======================================================
		
		-- https://www.youtube.com/watch?v=HW29067qVWk&list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU&index=17
		
	============================================================================
	- Variable Scope: Understand the LEGB Rule and Global/Nonlocal Statements
	============================================================================
	
		-- LEGB: Local, Enclosing, Global, Built-in. Python check variablec in this LEGB sequence.
		-- Local: variable defined with in function.
			----------------------
				x = 'global x'
				
				def test():
					y = 'local y'
				
				print(y)
			----------------------
			
		-- Enclosing: variable of local scope in enclosing function.
			----------------------
				def outer():
					x = 'outer x'
					
					def inner():
						x = 'inner x'
						print(x) # output 'inner x'
						
					inner()
					print(x) # output 'outer x'
					
				outer()
			
			----------------------
			
			# nonlocal example
			----------------------
				def outer():
					x = 'outer x'
					
					def inner():
						nonlocal x
						x = 'inner x'
						print(x) # output 'inner x'
						
					inner()
					print(x) # output 'inner x'
					
				outer()
			
			----------------------
			
		-- Global: variable defined at top level of module, explicitly declared using global keyword.
			----------------------
				x = 'global x'
				
				def test():
					x = 'local x'
					print(x) # output 'local x'
					
				print(x) # output 'global x'
				
			----------------------
				x = 'global x'
				
				def test():
					global x
					x = 'local x'
					print(x) # output 'local x'
				
				print(x) # output 'local x'
			----------------------
			
		-- Built-in: preassigned in python.
			-------------------------
				m = min([5,3,5,6,7,2])
				print(m) # output 2
			-------------------------
			
			# print all built-in 
			-------------------------	
				import builtins
				print(dir(builtins))
			-----------------------
		
	============================================
	- Slicing Lists & Strings
	============================================
		
		-- Slicing List
		-------------------------
		my_list = [1,2,3,4,5,6,7,8,9]
		
		#list[start:end:step]
			
		print(my_list[0:6])
		print(my_list[5:])
		print(my_list[:7])
		print(my_list[0:8:2] # output [1,3,5,7]
		print(my_list[0:10:2] # en index can be any bigger number then max index in this will not throw error, output [1,3,5,7,9]
		print(my_list[::-1]) # reverse list
		-------------------------
		
		-- Slicing Strings
		-------------------------
		url = 'http://example.com'
		
		#Reverse the url
		print(url[::-1])
		
		#Get top level domain
		print(url[-4:]) # output .com
		
		#Print url without http://
		print(url[7:])
		
		#Print url without http:// and top level domain
		print(url[7:-4])
		--------------------------
		
	==============================================================================
	- List, Set Comprehensions: How they work and why you should be using them
	==============================================================================
	    
		-- List Comparisions
		------------------------------
		
		nums = [1,2,3,4,5,6,7,8,9,10]
		
		# I want 'n' for each 'n' in nums
		my_list = []
		for n in nums:
			my_list.append(n)
		print(my_list)

		# Comprehension
		my_list = [n for n in nums]
		print(my_list)
		--------------------------------	
		
		nums = [1,2,3,4,5,6,7,8,9,10]

		# I want 'n*n' for each 'n' in nums
		my_list = []
		for n in nums:
			my_list.append(n*n)
		print(my_list)

		# Comprehension
		my_list = [n*n for n in nums]
		print(my_list)
		
		# Using a map + lambda
		squares = map(lambda n: n*n, nums)
		print(list(squares))
		---------------------------
		
		nums = [1,2,3,4,5,6,7,8,9,10]

		# I want all even numbers from list
		my_list = []
		for n in nums:
			if n%2 == 0:
				my_list.append(n)
		print(my_list)

		# Comprehension
		my_list = [n for n in nums if n%2 == 0]
		print(my_list)

		# Using filter + lambda
		evens = filter(lambda n: n%2 == 0, nums)
		print(list(evens))
		----------------------------
		
		# I want a (letter, num) pair for each letter in 'abcd' and each number in '0123'
		my_list = []
		for letter in 'abcd':
			for num in range(4):
				my_list.append((letter,num))
		print(my_list)

		# Comprehension
		my_list = [(letter, num) for letter in 'abcd' for num in range(4)]
		print(my_list)
		-----------------------------
		
		# Dictionary Comprehension: Index to index mapping using 

		names = ['Bruce', 'Clark', 'Peter', 'Logan', 'Wade']
		heros = ['Batman', 'Superman', 'Spiderman', 'Wolverine', 'Deadpool']
		pairs = zip(names, heros)
		print(list(pairs))
		------------------------------
		
		# Create a dictionary using two lists by ZIP function
		names = ['Bruce', 'Clark', 'Peter', 'Logan', 'Wade']
		heros = ['Batman', 'Superman', 'Spiderman', 'Wolverine', 'Deadpool']
		my_dict = {}
		for name, hero in zip(names, heros):
			my_dict[name] = hero
		print(my_dict)

		# Comprehension
		my_dict = {name: hero for name, hero in zip(names, heros)}
		print(my_dict)
		
		# Filter out 'Peter'
		my_dict = {name: hero for name, hero in zip(names, heros) if name != 'Peter'}
		print(my_dict)
		-------------------------------
		
		-- Set Comprehensions
		-----------------------------------
		
		# Create set from duplicate list
		nums = [1,1,2,1,3,4,3,4,5,5,6,7,8,7,9,9]
		my_set = set()
		for n in nums:
			my_set.add(n)
		print(my_set)

		# Set Comprehension
		my_set = {n for n in nums}
		print(my_set)
		----------------------------------
		
		# Generator Expression
		# I want to yield 'n*n' for each 'n' in nums
		nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

		def gen_func(nums):
			for n in nums:
				yield n*n
				
		my_gen = gen_func(nums)

		for i in my_gen:
			print(i)
			
		# Comprehension
		my_gen = (n*n for n in nums)

		for i in my_gen:
			print(i)
		---------------------------------
		
	=============================================
	- Sorting Lists, Tuples and Objects
	=============================================
			
		-- Sorting Lists Solutions
		----------------------------
		li = [8,5,2,5,6,4,3,7,3,1,9]
		s_li = sorted(li)
		print('Sorted list = ', s_li)
		print('Original List = ', li)

		li.sort()
		print('Original List = ', li)

		# Sorting on reverse order

		li = [8,5,2,5,6,4,3,7,3,1,9]
		s_li = sorted(li, reverse=True)
		print('Reverse Sorted list = ', s_li)
		print('Original List = ', li)

		li.sort(reverse=True)
		print('Reverse Original List = ', li)

		-- Sorting Tuples Solution
		------------------------------
		tup = (8,5,2,5,6,4,3,7,3,1,9)
		s_tup = sorted(tup)
		print('Sorted Tuple = ', tup)

		-- Sorting Disctionary Solution
		-----------------------------------
		dic = {'name' : 'Maddy', 'job' : 'Programmer', 'age' : None, 'os' : 'Mac'}
		# Return sorted keys
		s_dic = sorted(dic)
		print('Sorted Dictionary Keys= ', s_dic)

		-- Sorting based on Bulit-in functions
		-----------------------------------
		li = [-6, -5, -4, 1, 2, 3] 
		s_li = sorted(li, key=abs, reverse=False)
		print('Print Absolute Number Sorting = ', s_li)

		-- Sorting of Objects
		-----------------------------------
		class Employee():
			
			def __init__(self, name, age, salary):
				self.name = name
				self.age = age
				self.salary = salary
			
			def __repr__(self):
				return f'name={self.name}, age={self.age}, salary={self.salary}'
			
		e1 = Employee('John', 28, 50000)
		e2 = Employee('Wills', 25, 80000)
		e3 = Employee('Adam', 35, 90000)

		emp_list = [e1, e2, e3]

		def emp_sort(emp):
			return emp.name

		# Sorted using custom function
		s_emp_list = sorted(emp_list, key=emp_sort, reverse=False)
		print('Sorted Employees List on name = ', s_emp_list)

		# Sorted using lambda 
		s_emp_list = sorted(emp_list, key=lambda e: e.salary, reverse=False)
		print('Sorted Employees List on salary= ', s_emp_list)

		# Sorting using attrgetter from operator module
		from operator import attrgetter
		s_emp_list = sorted(emp_list, key=attrgetter('age'), reverse=False)
		print('Sorted Employees List on age= ', s_emp_list)

	=================================================================================
	- String Formatting: Advanced Operations for Dicts, Lists, Numbers and Dates
	=================================================================================








	
	
	
	
				
				
			
				
				
			
			
			
		
						
	
			
	
	
		